<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>I Love You Animation</title>
  <style>
    body {
      margin: 0;
      background: black;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
    }

    canvas {
      position: absolute;
      top: 0;
      left: 0;
    }

    .info {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: rgba(255, 255, 255, 0); /* Initially hidden */
      font-size: 48px;
      font-family: 'cursive', sans-serif;
      text-align: center;
      pointer-events: none;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.8), 0 0 20px rgba(255, 255, 255, 0.5);
      transition: opacity 2s ease-in-out;
      opacity: 0;
    }

    .info.visible {
      opacity: 1;
    }

    /* New CSS for the color-changing text */
    #main-text {
      transition: color 1.5s ease-in-out; /* Smooth color transition */
    }

    .sub-text {
        font-size: 28px;
        margin-top: 15px;
        color: rgba(255, 223, 186, 0.9);
        text-shadow: 0 0 8px rgba(255, 223, 186, 0.7);
    }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  <div id="text-container" class="info">
    <!-- The main text is now in its own span with an ID -->
    <span id="main-text">I ‚ù§Ô∏è You</span>
    <div class="sub-text">ü´µü´µü´µtmi</div>
  </div>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const textContainer = document.getElementById("text-container");
    const mainText = document.getElementById("main-text"); // Get the main text element

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let particlesArray = [];
    const numberOfParticles = 1000;
    const animationDuration = 3000;
    let animationStartTime;

    // Particle Class
    class Particle {
      constructor(targetX, targetY) {
        this.startX = Math.random() * canvas.width;
        this.startY = Math.random() * canvas.height;
        this.x = this.startX;
        this.y = this.startY;
        this.targetX = targetX;
        this.targetY = targetY;
        this.size = Math.random() * 2 + 1;
        this.color = `rgba(255, 20, 147, ${Math.random() * 0.5 + 0.5})`;
      }

      draw() {
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.closePath();
        ctx.fill();
      }

      update(progress) {
        const easeProgress = 1 - Math.pow(1 - progress, 4);
        this.x = this.startX + (this.targetX - this.startX) * easeProgress;
        this.y = this.startY + (this.targetY - this.startY) * easeProgress;
      }
    }

    // Heart Shape Formula
    function heartShape(t) {
      const scale = 20;
      const x = 16 * Math.pow(Math.sin(t), 3);
      const y = -(13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t));
      return { x: x * scale, y: y * scale };
    }

    function init() {
      particlesArray = [];
      for (let i = 0; i < numberOfParticles; i++) {
        let t = (i / numberOfParticles) * Math.PI * 2;
        let heart = heartShape(t);
        const radius = Math.random() * 50;
        const angle = Math.random() * Math.PI * 2;
        let targetX = heart.x + canvas.width / 2 + radius * Math.cos(angle);
        let targetY = heart.y + canvas.height / 2 + radius * Math.sin(angle);
        particlesArray.push(new Particle(targetX, targetY));
      }
    }

    // --- Logic for changing text color ---
    const colors = ['#39FF14', '#FF1493', '#FF0000']; // Green, Pink, Red
    let colorIndex = 0;

    function changeTextColor() {
      if (mainText) {
        mainText.style.color = colors[colorIndex];
        colorIndex = (colorIndex + 1) % colors.length;
      }
    }
    // --- End of color change logic ---

    function animate(timestamp) {
      if (!animationStartTime) {
        animationStartTime = timestamp;
      }
      
      const elapsedTime = timestamp - animationStartTime;
      let progress = Math.min(elapsedTime / animationDuration, 1);

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particlesArray.forEach(p => {
        p.update(progress);
        p.draw();
      });

      if (progress >= 1 && !textContainer.classList.contains('visible')) {
        textContainer.classList.add("visible");
        // Start changing colors only after the text becomes visible
        changeTextColor(); // Set initial color
        setInterval(changeTextColor, 2000); // Change color every 2 seconds
      }

      requestAnimationFrame(animate);
    }

    init();
    animate();

    window.addEventListener("resize", function () {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      textContainer.classList.remove("visible");
      animationStartTime = null;
      init();
      // Note: The color change interval will continue, which is fine.
    });
  </script>
</body>
</html>
